<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
	 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace는 쿼리들간에 아이디 식별에 사용 현재는 거의 사용 X --> 
<mapper namespace="Guestbook">
	<!-- 
		- 쿼리 이 파일에 저장. 태그는 select, insert, update, delete 
		- id : 쿼리를 식별하기 위한 고유값. 프로젝트 통틀어 하나만 있어야 함 다른 쿼리 xml 파일에 이 아이디 있으면 안됨
		- parameterType: "클래스명", 파라미터로 전달될 클래스명 기술. 기술한 파라미터로 값 전달
		- mybatis-config.xml에 기술한 typealias 에서 지정한 클래스명 사용
			보통 typealias 지정하고 거기서 지정한 값만 사용
		- resultType="클래스명" 결과 받아가고자 하는 클래스명 기술
		 	변환 데이터를 resultType에서 지정한 클래스로 객체를 만들고 객체에 setter를 호출해 값을 넣은 다음 ArrayList 객체에 담아서 보냄
		- 만일 DB 테이블의 필드명과 클래스 변수명이 다를 경우, 둘을 연결하기 위한 map이라는 것을 만들어 전달
		 	그때는 paramMap 이나 resultMap을 xml로 만들어서 전달
	-->
	<select id="Guestbook_getList" parameterType="GuestbookDto" resultType="GuestbookDto">
		select seq, title, writer, contents, to_char(wdate, 'yyyy-mm-dd') wdate, user_name, hit, num, pg
		from(
			select seq
					,title
					,writer
					,contents
					,wdate
					,hit
					,user_name
					,row_number() over(order by seq desc) num
					,ceil(row_number() over(order by seq desc)/#{pgSize})-1 pg
			from tb_guestbook A
			left outer join tb_member B on A.writer=B.user_id
		)A where A.pg = #{pg}
	</select>
	
	<select id="Guestbook_getTotalCnt" parameterType="GuestbookDto" resultType = "Integer">
		select count(*)
		from tb_guestbook
	</select>
	
	<select id = "Guestbook_getView" parameterType = "GuestbookDto" resultType="GuestbookDto">
		select seq, title, writer, contents, wdate, hit, user_name
		from tb_guestbook A
		left outer join tb_member B on A.writer = B.user_id
		where seq=#{seq}
	
	</select>
	
	<!-- 선행쿼리, 후행쿼리: 쿼리 여러개 묶어서 한번에 처리 - MyBatis -->
	<insert id="Guestbook_insert" parameterType = "GuestbookDto">
	<!-- select 쿼리를 먼저 진행하도록  resultType 반환이 integer타입 keyProperty order 진행순서 before 쓰면 먼저 진행됨-->
		<selectKey resultType="String" keyProperty = "seq" order="BEFORE">
			select nvl(max(seq),0)+1 as seq
			from tb_guestbook		
		</selectKey>
		insert into tb_guestbook
		(seq, title,writer, contents, wdate, hit) 
		values(#{seq}, #{title}, #{writer}, #{contents}, sysdate, 0) 
	</insert>
	
	<update id ="Guestbook_update" parameterType="GuestbookDto">
		update tb_guestbook
		set title = #{title}
			,contents = #{contents}
		where seq=#{seq}
	</update>
	
	<delete id="Guestbook_delete" parameterType ="GuestbookDto">
		delete tb_guestbook
		where seq = #{seq}
	</delete>
</mapper>